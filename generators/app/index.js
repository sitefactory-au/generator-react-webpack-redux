'use strict';
let generator = require('yeoman-generator');
let path = require('path');
let utils = require('../../utils/all');
let prompts = require('./prompts');
let fs = require('fs');
let localUtils = require('./utils');
// console.log( require.resolve('react'));
// console.log(path.dirname( require.resolve('react')));
// console.log(path.resolve('./'));
//let baseRootPath = path.dirname('./templates');
//var destPath = 'src/components/' + baseName + '/' + file;

module.exports = generator.Base.extend({

  constructor: function () {
    generator.Base.apply(this, arguments);

    // Make options available
    this.option('skip-welcome-message', {
      desc: 'Skip the welcome message',
      type: Boolean,
      defaults: false
    });

    this.option('skip-install');

    this.config.save();
  },

  initializing: function () {
    if (!this.options['skip-welcome-message']) {
      this.log(require('yeoman-welcome'));
      this.log('Out of the box I include Webpack and some default React components.\n');
    }

    //    Run the base react-webpack generator, then run the dispatcher
    // this.composeWith(
    //   'react-webpack',
    //   {
    //     options: {
    //       'skip-install': true
    //     }
    //   },
    //   {
    //     local: require.resolve('generator-react-webpack'),
    //     link: 'strong'
    //   }
    // );

    //Run the create root method
    // this.composeWith('sf-redux:root', {
    //   args: ['Root']
    // },
    //   {
    //     link: 'strong'
    //   });

    //this.conflicter.force = true;
  },

  prompting: function () {
    let done = this.async();
    this.prompt(prompts, function (props) {

      // Make sure to get the correct app name if it is not the default
      if (props.appName !== utils.yeoman.getAppName()) {
        props.appName = utils.yeoman.getAppName(props.appName);
      }

      // Set needed global vars for yo
      this.appName = props.appName;
      this.style = props.style;
      this.createApi = props.createApi; 

      // Set needed keys into config
      this.config.set('appName', this.appName);
      this.config.set('appPath', this.appPath);      
      this.config.set('createApi', this.createApi);

      this.config.save();

      done();
    }.bind(this));
  },

  configuring: function () {

    // Generate our package.json. Make sure to also include the required dependencies for styles
    //let defaultSettings = this.fs.readJSON(path.join(baseRootPath, 'package.json'));
    let defaultSettings = this.fs.readJSON(path.join(this.sourceRoot(), 'package.json'));
    let packageSettings = {
      name: this.appName,
      private: true,
      version: '0.0.1',
      description: 'YOUR DESCRIPTION - Generated by generator-react-webpack',
      main: '',
      scripts: defaultSettings.scripts,
      repository: '',
      keywords: [],
      author: 'Your name here',
      devDependencies: defaultSettings.devDependencies,
      dependencies: defaultSettings.dependencies
    };

    this.fs.writeJSON(this.destinationPath('package.json'), packageSettings);
  },

  writing: function() {

    let excludeList = [
      'LICENSE',
      'README.md',
      'CHANGELOG.md',
      'node_modules',
      'package.json',
      '.travis.yml'
    ];


// Get all files in our repo and copy the ones we should
    var basePath = this.sourceRoot();
    var destPath = this.destinationRoot();
    console.log( 'copy files');
    fs.readdir(this.sourceRoot(), (err, items) => {
      for(let item of items) {

        // Skip the item if it is in our exclude list
        if(excludeList.indexOf(item) !== -1) {
          continue;
        }

        // Copy all items to our root
//        let fullPath = path.join(baseRootPath, item);
        let fullSrcPath = path.join(basePath, item);
        let fullDestPath = path.join( destPath, item);
        if(fs.lstatSync(fullSrcPath).isDirectory()) {
          fullSrcPath = path.join( fullSrcPath, '**/*');
//          this.fs.copy( path.join( fullSrcPath, '**/*', fullDestPath))
//          this.bulkDirectory(item, item);
        } else {
          if (item === '.npmignore') {
            fullDestPath = path.join( destPath, '.gitignore');
          }
        }
//        console.log( 'copy: ' + fullSrcPath + ' -> ' + fullDestPath);
        this.fs.copy(fullSrcPath, fullDestPath);
    }
    });


    /*
    // Get all files in our repo and copy the ones we should
    fs.readdir(this.sourceRoot(), (err, items) => {
      console.log( items ); 
      for(let item of items) {
        console.log( item ); 

        // Skip the item if it is in our exclude list
        if(excludeList.indexOf(item) !== -1) {
          continue;
        }

        // Copy all items to our root
//        let fullPath = path.join(baseRootPath, item);
        let fullPath = path.join(this.sourceRoot(), item);
        if(fs.lstatSync(fullPath).isDirectory()) {
          this.bulkDirectory(item, item);
        } else {
          if (item === '.npmignore') {
            this.copy(item, '.gitignore');
          } else {
            console.log( 'copy: ' + item + ' -> ' + item);
            this.copy(item, item);
          }
        }
      }
    });
    fs.commit();
*/
  
    this.composeWith('sf-redux:component', {
      args: ['HelloWorld']
    });
    
    this.composeWith('sf-redux:page', {
      args: ['Home']
    });

    if( this.createApi ){
      this.composeWith('sf-redux:api', {
        args: ['api']
      });
    }
  },


  install: function () {
    this.conflicter.force = true;

    localUtils.commitReducerAttachments();
    // console.log('test');
    // console.log( this.destinationPath('src/reducers/index.js') );
    // var reducerPath = this.destinationPath('src/reducers/index.js');
    //   console.log( 'test' + this.fs.read( reducerPath));
      //throw('error');
  
    if (!this.options['skip-install']) {
      this.npmInstall();
    }
  },
});
